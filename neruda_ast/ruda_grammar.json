{"lexer":{"token_kinds":["+","-","*","/","(",")","{","}","[","]","<",">","=","!","&","?",":",".",";",",","\"","'","#","+=","-=","*=","/=","//","<=",">=","==","!=","&&","||"],"longest_token_size":2},"grammar":{"nodes":{"tuple_parameter":{"name":"tuple_parameter","rules":[{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Enumerator":"parameter_idents"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Is":{"token":{"Enumerator":"parameter_idents"},"rules":[],"parameters":[{"Set":"identifiers"}]}}],"parameters":[{"Set":"identifiers"}]}}],"isnt":[],"parameters":[{"Set":"identifiers"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"variables":{"identifiers":"NodeList"},"docs":"A tuple parameter is a list of identifiers separated by commas enclosed in parentheses.\n\n                    example:\n                    ```\n                    (a, b, c)\n                    (a, (b, c), d)\n                    ```"},"KWEnum":{"name":"KWEnum","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Maybe":{"token":{"Word":"pub"},"is":[],"isnt":[],"parameters":[{"True":"public"}]}},{"Is":{"token":{"Word":"enum"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Token":{"Token":"{"}},"rules":[],"parameters":[]}},{"While":{"token":{"Enumerator":"enum_members"},"rules":[],"parameters":[{"Set":"members"}]}},{"Is":{"token":{"Token":{"Token":"}"}},"rules":[],"parameters":[]}}],"variables":{"docs":"NodeList","identifier":"Node","members":"NodeList","public":"Boolean"},"docs":"An enum is a type that contains a list of values.\n\n                    example:\n                    ```\n                    enum A {\n                        a,\n                        b,\n                        c,\n                    }\n                    ```"},"KWType":{"name":"KWType","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Is":{"token":{"Word":"type"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Token":{"Token":"="}},"rules":[],"parameters":[]}},{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"type"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"type":"Node","identifier":"Node","docs":"NodeList"},"docs":"A type is a type alias.\n\n                    example:\n                    ```\n                    type A = int;\n                    type B = int;\n                    ```"},"block":{"name":"block","rules":[{"Is":{"token":{"Token":{"Token":"{"}},"rules":[],"parameters":[{"HardError":true}]}},{"While":{"token":{"Enumerator":"block_line"},"rules":[],"parameters":[{"Set":"nodes"}]}},{"Is":{"token":{"Token":{"Token":"}"}},"rules":[],"parameters":[]}}],"variables":{"nodes":"NodeList"},"docs":"A block is a list of statements enclosed in curly braces.\n\n                    example:\n                    ```\n                    {\n                        let a = 5;\n                        let b = 10;\n                        return a + b;\n                    }\n                    ```"},"generic_declaration":{"name":"generic_declaration","rules":[{"Is":{"token":{"Token":{"Token":"<"}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"generic_ident_declaration"},"rules":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Node":"generic_ident_declaration"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"identifiers"}]}}],"parameters":[]}}],"parameters":[{"Set":"identifiers"}]}},{"Command":{"command":{"Label":{"name":"end"}}}},{"Is":{"token":{"Token":{"Token":">"}},"rules":[],"parameters":[]}}],"variables":{"identifiers":"NodeList"},"docs":"A generic declaration is a list of generic identifiers.\n\n                    example:\n                    ```\n                    <T, U(Add, Send)>\n                    <T>\n                    ```"},"array":{"name":"array","rules":[{"Is":{"token":{"Token":{"Token":"["}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"array_types"},"rules":[],"parameters":[{"Set":"body"}]}},{"Is":{"token":{"Token":{"Token":"]"}},"rules":[],"parameters":[]}}],"variables":{"body":"Node"},"docs":"An array literal is a list of values separated by commas and enclosed in square brackets."},"closure":{"name":"closure","rules":[{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Node":"closure_parameter"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Node":"closure_parameter"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"parameters"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"parameters"}]}},{"Command":{"command":{"Label":{"name":"end"}}}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[{"HardError":true}]}},{"Command":{"command":{"Print":{"message":"Fakt je to tu"}}}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"parameters":"NodeList","body":"Node"},"docs":"A closure is a block of code that can be passed around as a value.\n\n                    example:\n                    ```\n                    (a, b, ..c) -> {\n                        return a + b + c.len();\n                    }\n                    ```"},"value_refs":{"name":"value_refs","rules":[{"Loop":{"rules":[{"MaybeOneOf":{"is_one_of":[{"token":{"Token":{"Token":"&"}},"rules":[],"parameters":[{"Increment":"refs"}]},{"token":{"Token":{"Token":"&&"}},"rules":[],"parameters":[{"Increment":"refs"},{"Increment":"refs"}]},{"token":{"Token":{"Token":"*"}},"rules":[],"parameters":[{"Decrement":"refs"}]}],"isnt":[{"Command":{"command":{"Goto":{"label":"end_refs"}}}}]}}]}},{"Command":{"command":{"Label":{"name":"end_refs"}}}}],"variables":{"refs":"Number"},"docs":"A value ref is a list of reference and dereference operators that are applied to a value.\n\n                    example:\n                    ```\n                    a\n                    &a\n                    &&a\n                    *a\n                    **a\n                    ```"},"tuple_type":{"name":"tuple_type","rules":[{"Loop":{"rules":[{"MaybeOneOf":{"is_one_of":[{"token":{"Token":{"Token":"&"}},"rules":[],"parameters":[{"Increment":"refs"}]},{"token":{"Token":{"Token":"&&"}},"rules":[],"parameters":[{"Increment":"refs"},{"Increment":"refs"}]}],"isnt":[{"Command":{"command":{"Goto":{"label":"end_refs"}}}}]}}]}},{"Command":{"command":{"Label":{"name":"end_refs"}}}},{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"type_list"},"rules":[],"parameters":[{"Set":"types"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"variables":{"types":"NodeList","refs":"Number"},"docs":"A tuple type is a type that represents a list of values of different types.\n\n                    example:\n                    ```\n                    (int, float, string)\n                    &(int, float, (string, &&char))\n                    ```"},"type":{"name":"type","rules":[{"Loop":{"rules":[{"MaybeOneOf":{"is_one_of":[{"token":{"Token":{"Token":"&"}},"rules":[],"parameters":[{"Increment":"refs"}]},{"token":{"Token":{"Token":"&&"}},"rules":[],"parameters":[{"Increment":"refs"},{"Increment":"refs"}]}],"isnt":[{"Command":{"command":{"Goto":{"label":"end_refs"}}}}]}}]}},{"Command":{"command":{"Label":{"name":"end_refs"}}}},{"Is":{"token":{"Node":"path"},"rules":[],"parameters":[{"Set":"path"}]}},{"Maybe":{"token":{"Node":"generic_expression"},"is":[],"isnt":[],"parameters":[{"Set":"generic"}]}}],"variables":{"path":"Node","generic":"Node","refs":"Number"},"docs":"A type defines memory layout and operations that can be performed on a value.\n\n                    example:\n                    ```\n                    int\n                    float\n                    struct MyStruct {\n                        int a;\n                        float b;\n                    }\n                    ```"},"entry":{"name":"entry","rules":[{"Loop":{"rules":[{"Maybe":{"token":{"Token":{"Control":"Eof"}},"is":[{"Command":{"command":{"Goto":{"label":"eof"}}}}],"isnt":[],"parameters":[]}},{"Debug":{"target":null}},{"Is":{"token":{"Enumerator":"entry_nodes"},"rules":[],"parameters":[{"Set":"list"}]}}]}},{"Command":{"command":{"Label":{"name":"eof"}}}}],"variables":{"list":"NodeList"},"docs":"An entry is a list of nodes that define the structure of a file."},"use_path":{"name":"use_path","rules":[{"Loop":{"rules":[{"IsOneOf":{"tokens":[{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"path"}]},{"token":{"Token":{"Token":"*"}},"rules":[],"parameters":[{"Set":"path"}]},{"token":{"Node":"use_multiple_paths"},"rules":[{"Command":{"command":{"Goto":{"label":"end_path"}}}}],"parameters":[{"Set":"path"}]}]}},{"Maybe":{"token":{"Token":{"Token":"."}},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end_path"}}}}],"parameters":[]}}]}},{"Command":{"command":{"Label":{"name":"end_path"}}}}],"variables":{"path":"NodeList"},"docs":"A use path is a path to file contents that are to be included in the current file. Use '*' to include all contents.\n\n                    example:\n                    ```path.to.file.*```"},"KWImport":{"name":"KWImport","rules":[{"Is":{"token":{"Word":"import"},"rules":[{"Is":{"token":{"Token":{"Complex":"string"}},"rules":[],"parameters":[{"Set":"file"},{"Global":"imports"}]}}],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Word":"as"},"is":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"alias"}]}}],"isnt":[],"parameters":[]}}],"variables":{"file":"Node","alias":"Node"},"docs":"An import statement is used to include the contents of another file in the current file.\n\n                    example:\n                    ```import \"path/to/file\";```"},"KWUse":{"name":"KWUse","rules":[{"Is":{"token":{"Word":"use"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"root"}]}},{"Maybe":{"token":{"Token":{"Token":"."}},"is":[{"Is":{"token":{"Node":"use_path"},"rules":[],"parameters":[{"Set":"path"}]}}],"isnt":[],"parameters":[]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"root":"Node","path":"Node"},"docs":"A use statement is used to include the contents of another file in the current file.\n\n                    example:\n                    ```use path.to.file.*;```"},"tail_derefs":{"name":"tail_derefs","rules":[{"Is":{"token":{"Token":{"Token":"*"}},"rules":[],"parameters":[{"Increment":"amount"}]}},{"While":{"token":{"Token":{"Token":"*"}},"rules":[],"parameters":[{"Increment":"amount"}]}}],"variables":{"amount":"Number"},"docs":"A tail deref is a list of dereference operators that are applied to a value.\n\n                    example:\n                    ```\n                    a\n                    a.*\n                    a.**.a\n                    ```"},"KWElse":{"name":"KWElse","rules":[{"Is":{"token":{"Word":"else"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"body":"Node"},"docs":"An else statement is a block of code that is executed if the previous conditions are false.\n\n                    example:\n                    ```\n                    if a == 5 {\n                        return a;\n                    } else {\n                        return a + 5;\n                    }\n                    ```"},"index":{"name":"index","rules":[{"Is":{"token":{"Token":{"Token":"["}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"index"}]}},{"Is":{"token":{"Token":{"Token":"]"}},"rules":[],"parameters":[]}}],"variables":{"index":"Node"},"docs":"An index is a value that is used to access an element in an array.\n\n                    example:\n                    ```\n                    a[0]\n                    a[b]\n                    ```"},"enum_variant":{"name":"enum_variant","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"},{"HardError":true}]}},{"Maybe":{"token":{"Token":{"Token":"("}},"is":[{"Maybe":{"token":{"Node":"parameter"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Is":{"token":{"Node":"parameter"},"rules":[],"parameters":[{"Set":"parameters"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"parameters"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"isnt":[],"parameters":[]}},{"Maybe":{"token":{"Token":{"Token":"="}},"is":[{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"value"}]}}],"isnt":[],"parameters":[]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"docs":"NodeList","identifier":"Node","value":"Node","parameters":"NodeList"},"docs":"An enum variant is a value that is contained in an enum.\n\n                    example:\n                    ```\n                    a,\n                    b = 5,\n                    c,\n                    ```"},"generic_ident_declaration":{"name":"generic_ident_declaration","rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"HardError":true},{"Set":"identifier"}]}},{"Maybe":{"token":{"Token":{"Token":"("}},"is":[{"Is":{"token":{"Node":"path"},"rules":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Node":"path"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"traits"}]}}],"parameters":[]}}],"parameters":[{"Set":"traits"}]}},{"Command":{"command":{"Label":{"name":"end"}}}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"isnt":[],"parameters":[]}}],"variables":{"identifier":"Node","traits":"NodeList"},"docs":"A generic identifier declaration is an identifier followed by a list of traits.\n\n                    example:\n                    ```\n                    T\n                    U(Add, Send)\n                    ```"},"parameter":{"name":"parameter","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Maybe":{"token":{"Token":{"Token":"."}},"is":[{"Is":{"token":{"Token":{"Token":"."}},"rules":[],"parameters":[{"True":"rest"}]}}],"isnt":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"parameter_idents"},"rules":[],"parameters":[{"Set":"identifier"},{"HardError":true}]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[]}},{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"type"}]}},{"Maybe":{"token":{"Token":{"Token":"="}},"is":[{"Is":{"token":{"Node":"expression"},"rules":[],"parameters":[{"Set":"default"}]}}],"isnt":[],"parameters":[]}}],"variables":{"docs":"NodeList","type":"Node","identifier":"Node","rest":"Boolean","default":"Node"},"docs":"A parameter is a variable that is passed to a function.\n\n                    example:\n                    ```\n                    fun add(a: int, b: int = 2) -> int {\n                        return a + b;\n                    }\n                    ```"},"KWElseIf":{"name":"KWElseIf","rules":[{"Is":{"token":{"Word":"else"},"rules":[],"parameters":[]}},{"Is":{"token":{"Word":"if"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"condition"}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}},{"Maybe":{"token":{"Node":"KWElseIf"},"is":[],"isnt":[{"Maybe":{"token":{"Node":"KWElse"},"is":[],"isnt":[],"parameters":[{"Set":"next"}]}}],"parameters":[{"Set":"next"}]}}],"variables":{"body":"Node","condition":"Node","next":"Node"},"docs":"An else if statement is a conditional statement that executes a block of code if a condition is true and the previous conditions are false.\n\n                    example:\n                    ```\n                    if a == 5 {\n                        return a;\n                    } else if a == 10 {\n                        return a + 5;\n                    }\n                    ```"},"expression":{"name":"expression","rules":[{"Is":{"token":{"Node":"value"},"rules":[],"parameters":[{"Set":"nodes"},{"HardError":true}]}},{"While":{"token":{"Enumerator":"operators"},"rules":[{"Is":{"token":{"Node":"value"},"rules":[],"parameters":[{"Set":"nodes"}]}}],"parameters":[{"Set":"nodes"}]}}],"variables":{"closure":"Node","nodes":"NodeList"},"docs":"An expression is a combination of values and operators that can be evaluated to a single value.\n\n                    example:\n                    ```\n                    5 + 10\n                    a * b\n                    ```"},"statement":{"name":"statement","rules":[{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"expression"},{"HardError":true}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"expression":"Node"},"docs":"A statement is an expression followed by a semicolon.\n\n                    example:\n                    ```\n                    5 + 10;\n                    a * b;\n                    ```"},"KWWhile":{"name":"KWWhile","rules":[{"Is":{"token":{"Word":"while"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"loop_label"},"is":[],"isnt":[],"parameters":[{"Set":"label"}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"condition"}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"body":"Node","condition":"Node","label":"Node"},"docs":"A while statement is a loop that executes a block of code while a condition is true.\n\n                    example:\n                    ```\n                    while a < 5 {\n                        a += 1;\n                    }\n                    ```"},"array_type":{"name":"array_type","rules":[{"Loop":{"rules":[{"MaybeOneOf":{"is_one_of":[{"token":{"Token":{"Token":"&"}},"rules":[],"parameters":[{"Increment":"refs"}]},{"token":{"Token":{"Token":"&&"}},"rules":[],"parameters":[{"Increment":"refs"},{"Increment":"refs"}]}],"isnt":[{"Command":{"command":{"Goto":{"label":"end_refs"}}}}]}}]}},{"Command":{"command":{"Label":{"name":"end_refs"}}}},{"Is":{"token":{"Token":{"Token":"["}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"type"},"rules":[],"parameters":[{"Set":"type"}]}},{"Is":{"token":{"Token":{"Token":"]"}},"rules":[],"parameters":[]}}],"variables":{"refs":"Number","type":"Node"},"docs":"An array type is a type that represents a list of values of the same type.\n\n                    example:\n                    ```\n                    [int]\n                    &[[Foo]]\n                    ```"},"generic_expression":{"name":"generic_expression","rules":[{"Is":{"token":{"Token":{"Token":"<"}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"types"},"rules":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Enumerator":"types"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"types"}]}}],"parameters":[]}}],"parameters":[{"Set":"types"}]}},{"Command":{"command":{"Label":{"name":"end"}}}},{"Is":{"token":{"Token":{"Token":">"}},"rules":[],"parameters":[]}}],"variables":{"types":"NodeList"},"docs":"A generic expression is a list of types.\n\n                    example:\n                    ```\n                    <int, float>\n                    <T, char>\n                    ```"},"KWFor":{"name":"KWFor","rules":[{"Is":{"token":{"Word":"for"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"loop_label"},"is":[],"isnt":[],"parameters":[{"Set":"label"}]}},{"Is":{"token":{"Enumerator":"parameter_idents"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Word":"in"},"rules":[],"parameters":[]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"expression"}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"expression":"Node","body":"Node","label":"Node","identifier":"Node"},"docs":"A for statement is a loop that executes a block of code for each element in a list.\n\n                    example:\n                    ```\n                    for a in [1, 2, 3] {\n                        print(a);\n                    }\n                    ```"},"instance":{"name":"instance","rules":[{"Debug":{"target":null}},{"Is":{"token":{"Token":{"Token":"{"}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Node":"instance_field"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Node":"instance_field"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"fields"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"fields"}]}},{"Command":{"command":{"Label":{"name":"end"}}}},{"Is":{"token":{"Token":{"Token":"}"}},"rules":[],"parameters":[]}}],"variables":{"fields":"NodeList"},"docs":"An instance is a list of fields separated by commas enclosed in curly braces.\n\n                    example:\n                    ```\n                    {\n                        a: 5,\n                        b: 10,\n                    }\n                    ```"},"instance_field":{"name":"instance_field","rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"},{"HardError":true}]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"expression"}]}}],"variables":{"identifier":"Node","expression":"Node"},"docs":"An instance field is a field that is assigned a value in an instance.\n\n                    example:\n                    ```\n                    a: 5\n                    b: 10\n                    ```"},"value":{"name":"value","rules":[{"MaybeOneOf":{"is_one_of":[{"token":{"Word":"new"},"rules":[],"parameters":[{"True":"alloc"}]},{"token":{"Word":"delete"},"rules":[],"parameters":[{"True":"dealloc"}]}],"isnt":[]}},{"While":{"token":{"Enumerator":"unary_operators"},"rules":[],"parameters":[{"Set":"unaries"}]}},{"Is":{"token":{"Node":"value_refs"},"rules":[],"parameters":[{"Set":"refs"}]}},{"IsOneOf":{"tokens":[{"token":{"Node":"anonymous_function"},"rules":[],"parameters":[{"Set":"body"},{"HardError":true}]},{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"body"},{"HardError":true}]},{"token":{"Enumerator":"literals"},"rules":[],"parameters":[{"Set":"body"},{"HardError":true}]},{"token":{"Node":"parenthesis"},"rules":[],"parameters":[{"Set":"body"},{"HardError":true}]}]}},{"Is":{"token":{"Node":"tail"},"rules":[],"parameters":[{"Set":"tail"}]}}],"variables":{"unaries":"NodeList","refs":"Node","tail":"Node","alloc":"Boolean","dealloc":"Boolean","body":"Node"},"docs":"A value is a literal, variable, or expression that can be evaluated to a single value.\n\n                    example:\n                    ```\n                    5\n                    a\n                    ```"},"parenthesis":{"name":"parenthesis","rules":[{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"values_list"},"rules":[],"parameters":[{"Set":"values"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"variables":{"values":"Node"},"docs":"A parenthesis is a list of values separated by commas enclosed in parentheses.\n\n                    example:\n                    ```\n                    (a, b, c)\n                    (a, (b, c), d)\n                    ```"},"call":{"name":"call","rules":[{"Maybe":{"token":{"Node":"generic_expression"},"is":[],"isnt":[],"parameters":[{"Set":"generic"}]}},{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Node":"values_list"},"rules":[],"parameters":[{"Set":"arguments"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}}],"variables":{"generic":"Node","arguments":"Node"},"docs":"A call is a function that is called with a list of arguments.\n\n                    example:\n                    ```\n                    a()\n                    a(b, c)\n                    a(b, c, d)\n                    ```"},"tail":{"name":"tail","rules":[{"While":{"token":{"Enumerator":"tail_options"},"rules":[],"parameters":[{"Set":"tail"}]}}],"variables":{"tail":"NodeList"},"docs":"A tail is a list of tail options that are applied to a value.\n\n                    example:\n                    ```\n                    a\n                    a.b\n                    a.b.c\n                    a[0]\n                    a[0].b\n                    a[0].b.c\n                    a(0)\n                    a(0).b\n                    a(0).b.c\n                    ```"},"named_expression":{"name":"named_expression","rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"expression"}]}}],"variables":{"expression":"Node","identifier":"Node"},"docs":"A named expression is an identifier followed by a colon and an expression.\n\n                    example:\n                    ```\n                    a: 5\n                    b: a + 5\n                    ```"},"KWLet":{"name":"KWLet","rules":[{"Is":{"token":{"Word":"let"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Maybe":{"token":{"Token":{"Token":":"}},"is":[{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"type"}]}}],"isnt":[],"parameters":[]}},{"Maybe":{"token":{"Token":{"Token":"="}},"is":[{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"value"}]}}],"isnt":[],"parameters":[]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"type":"Node","identifier":"Node","value":"Node"},"docs":"A let statement is a variable declaration.\n\n                    example:\n                    ```\n                    let a: int = 5;\n                    let b = a + 5;\n                    ```"},"KWLoop":{"name":"KWLoop","rules":[{"Is":{"token":{"Word":"loop"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"loop_label"},"is":[],"isnt":[],"parameters":[{"Set":"label"}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"label":"Node","body":"Node"},"docs":"A loop statement is a loop that executes a block of code indefinitely.\n\n                    example:\n                    ```\n                    loop {\n                        a += 1;\n                    }\n                    ```"},"KWReturn":{"name":"KWReturn","rules":[{"Is":{"token":{"Word":"return"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Enumerator":"expressions"},"is":[],"isnt":[],"parameters":[{"Set":"expression"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"expression":"Node"},"docs":"A return statement is a statement that returns a value from a function.\n\n                    example:\n                    ```\n                    return 5;\n                    return a + 5;\n                    ```"},"loop_label":{"name":"loop_label","rules":[{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[]}}],"variables":{"identifier":"Node"},"docs":"A loop label is an identifier followed by a colon.\n\n                    example:\n                    ```\n                    a:\n                    b:\n                    ```"},"class_field":{"name":"class_field","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Is":{"token":{"Token":{"Token":":"}},"rules":[],"parameters":[]}},{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"type"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"docs":"NodeList","identifier":"Node","type":"Node"},"docs":"A class field is a field that is declared in a class.\n\n                    example:\n                    ```\n                    a: int;\n                    b: int;\n                    ```"},"use_multiple_paths":{"name":"use_multiple_paths","rules":[{"Is":{"token":{"Token":{"Token":"{"}},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"use_path"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Node":"use_path"},"is":[],"isnt":[],"parameters":[{"Set":"paths"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"paths"}]}},{"Is":{"token":{"Token":{"Token":"}"}},"rules":[],"parameters":[]}}],"variables":{"paths":"NodeList"},"docs":"A use multiple paths is a list of paths to file contents that are to be included in the current file.\n\n                    example:\n                    ```{ path1, path2, path3.* }```"},"array_builder":{"name":"array_builder","rules":[{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"value"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"times"}]}}],"variables":{"times":"Node","value":"Node"},"docs":"An array builder is a way to initialize an array with a single value repeated a number of times."},"anonymous_function":{"name":"anonymous_function","rules":[{"Is":{"token":{"Word":"fun"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Node":"parameter"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Is":{"token":{"Node":"parameter"},"rules":[],"parameters":[{"Set":"parameters"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"parameters"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Token":{"Token":":"}},"is":[{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"return_type"}]}}],"isnt":[],"parameters":[]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"body":"Node","return_type":"Node","parameters":"NodeList"},"docs":"An anonymous function is a function that is defined without a name. It can be assigned to a variable or passed as an argument to another function.\n\n                    example:\n                    ```\n                    fun(a: int, b: int) -> int {\n                        return a + b;\n                    }\n                    ```"},"path":{"name":"path","rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"path"},{"HardError":true}]}},{"While":{"token":{"Token":{"Token":"."}},"rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"path"}]}}],"parameters":[]}}],"variables":{"path":"NodeList"},"docs":"A path is a list of identifiers separated by dots.\n\n                    example:\n                    ```\n                    path.to.file\n                    ```"},"field":{"name":"field","rules":[{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"field"}]}}],"variables":{"field":"Node"},"docs":"A field is an identifier that is used to access a value in an instance.\n\n                    example:\n                    ```\n                    a\n                    b\n                    ```"},"KWFunction":{"name":"KWFunction","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Maybe":{"token":{"Word":"pub"},"is":[],"isnt":[],"parameters":[{"True":"public"}]}},{"Is":{"token":{"Word":"fun"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Maybe":{"token":{"Node":"generic_declaration"},"is":[],"isnt":[],"parameters":[{"Set":"generic"}]}},{"Is":{"token":{"Token":{"Token":"("}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Node":"parameter"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Is":{"token":{"Node":"parameter"},"rules":[],"parameters":[{"Set":"parameters"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"parameters"}]}},{"Is":{"token":{"Token":{"Token":")"}},"rules":[],"parameters":[]}},{"Maybe":{"token":{"Token":{"Token":":"}},"is":[{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"return_type"}]}}],"isnt":[],"parameters":[]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}}],"variables":{"parameters":"NodeList","identifier":"Node","return_type":"Node","body":"Node","public":"Boolean","docs":"NodeList","generic":"Node"},"docs":"A function is a block of code that can be called by other parts of the program.\n\n                    example:\n                    ```\n                    fun add<T(Add)>(a: T, b: T) -> T {\n                        return a + b;\n                    }\n                    ```"},"values_list":{"name":"values_list","rules":[{"Maybe":{"token":{"Enumerator":"list_values"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Maybe":{"token":{"Enumerator":"list_values"},"is":[],"isnt":[{"Command":{"command":{"Goto":{"label":"end"}}}}],"parameters":[{"Set":"values"}]}}],"parameters":[]}}],"isnt":[],"parameters":[{"Set":"values"},{"HardError":true}]}},{"Command":{"command":{"Label":{"name":"end"}}}}],"variables":{"values":"NodeList"},"docs":"A values list is a list of values separated by commas.\n\n                    example:\n                    ```\n                    a, b, c\n                    a, b, c, d\n                    ```"},"KWIf":{"name":"KWIf","rules":[{"Is":{"token":{"Word":"if"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"expressions"},"rules":[],"parameters":[{"Set":"condition"}]}},{"Is":{"token":{"Node":"block"},"rules":[],"parameters":[{"Set":"body"}]}},{"Maybe":{"token":{"Node":"KWElseIf"},"is":[],"isnt":[{"Maybe":{"token":{"Node":"KWElse"},"is":[],"isnt":[],"parameters":[{"Set":"next"}]}}],"parameters":[{"Set":"next"}]}}],"variables":{"condition":"Node","body":"Node","next":"Node"},"docs":"An if statement is a conditional statement that executes a block of code if a condition is true.\n\n                    example:\n                    ```\n                    if a == 5 {\n                        return a;\n                    }\n                    ```"},"type_list":{"name":"type_list","rules":[{"Maybe":{"token":{"Enumerator":"types"},"is":[{"While":{"token":{"Token":{"Token":","}},"rules":[{"Is":{"token":{"Enumerator":"types"},"rules":[],"parameters":[{"Set":"types"}]}}],"parameters":[{"Set":"types"}]}}],"isnt":[],"parameters":[{"Set":"types"},{"HardError":true}]}}],"variables":{"types":"NodeList"},"docs":"A type list is a list of types separated by commas.\n\n                    example:\n                    ```\n                    int, float, string\n                    ```"},"KWBreak":{"name":"KWBreak","rules":[{"Is":{"token":{"Word":"break"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"loop_label"},"is":[],"isnt":[],"parameters":[{"Set":"label"}]}},{"Maybe":{"token":{"Enumerator":"expressions"},"is":[],"isnt":[],"parameters":[{"Set":"expression"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"expression":"Node","label":"Node"},"docs":"A break statement is a statement that exits a loop.\n\n                    example:\n                    ```\n                    break;\n                    break a;\n                    break a + 5;\n                    ```"},"KWContinue":{"name":"KWContinue","rules":[{"Is":{"token":{"Word":"continue"},"rules":[],"parameters":[{"HardError":true}]}},{"Maybe":{"token":{"Node":"loop_label"},"is":[],"isnt":[],"parameters":[{"Set":"label"}]}},{"Is":{"token":{"Token":{"Token":";"}},"rules":[],"parameters":[]}}],"variables":{"label":"Node"},"docs":"A continue statement is a statement that skips the rest of the loop and continues to the next iteration.\n\n                    example:\n                    ```\n                    continue;\n                    continue a;\n                    ```"},"tail_dot":{"name":"tail_dot","rules":[{"Is":{"token":{"Token":{"Token":"."}},"rules":[],"parameters":[{"HardError":true}]}},{"Debug":{"target":null}},{"IsOneOf":{"tokens":[{"token":{"Node":"field"},"rules":[],"parameters":[{"Set":"node"}]},{"token":{"Node":"tail_derefs"},"rules":[],"parameters":[{"Set":"node"}]},{"token":{"Node":"instance"},"rules":[],"parameters":[{"Set":"node"}]}]}}],"variables":{"node":"Node"},"docs":"A tail dot is a field, dereference, or instance that is accessed from a value.\n\n                    example:\n                    ```\n                    a\n                    a.b\n                    a.*\n                    a.**\n                    a.{\n                        a: 5,\n                        b: 10,\n                    }\n                    ```"},"KWClass":{"name":"KWClass","rules":[{"While":{"token":{"Token":{"Complex":"doc_comment"}},"rules":[],"parameters":[{"Set":"docs"}]}},{"Maybe":{"token":{"Word":"pub"},"is":[],"isnt":[],"parameters":[{"True":"public"}]}},{"Is":{"token":{"Word":"class"},"rules":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Token":"Text"},"rules":[],"parameters":[{"Set":"identifier"}]}},{"Maybe":{"token":{"Node":"generic_declaration"},"is":[],"isnt":[],"parameters":[{"Set":"generic"}]}},{"Is":{"token":{"Token":{"Token":"{"}},"rules":[],"parameters":[]}},{"While":{"token":{"Enumerator":"class_members"},"rules":[],"parameters":[{"Set":"members"}]}},{"Is":{"token":{"Token":{"Token":"}"}},"rules":[],"parameters":[]}}],"variables":{"public":"Boolean","identifier":"Node","docs":"NodeList","generic":"Node","members":"NodeList"},"docs":"A class is a type that contains fields and functions.\n\n                    example:\n                    ```\n                    class A {\n                        a: int;\n                        b: int;\n                        fn c() -> int {\n                            return a + b;\n                        }\n                    }\n                    ```"},"closure_parameter":{"name":"closure_parameter","rules":[{"Maybe":{"token":{"Token":{"Token":"."}},"is":[{"Is":{"token":{"Token":{"Token":"."}},"rules":[],"parameters":[{"True":"rest"}]}}],"isnt":[],"parameters":[{"HardError":true}]}},{"Is":{"token":{"Enumerator":"parameter_idents"},"rules":[],"parameters":[{"Set":"identifier"},{"HardError":true}]}}],"variables":{"identifier":"Node","rest":"Boolean"},"docs":"A closure parameter is a variable that is passed to a closure.\n\n                    example:\n                    ```\n                    (a, b, ..c) -> {\n                        return a + b + c.len();\n                    }\n                    ```"}},"enumerators":{"types":{"name":"types","values":[{"Node":"type"},{"Node":"array_type"},{"Node":"tuple_type"}]},"keywords":{"name":"keywords","values":[{"Word":"if"},{"Word":"else"},{"Word":"while"},{"Word":"use"},{"Word":"for"},{"Word":"return"},{"Word":"break"},{"Word":"continue"},{"Word":"fun"},{"Word":"let"},{"Word":"enum"},{"Word":"class"},{"Word":"delete"},{"Word":"new"},{"Word":"impl"},{"Word":"const"},{"Word":"trait"},{"Word":"type"},{"Word":"as"},{"Word":"switch"},{"Word":"error"},{"Word":"try"},{"Word":"yeet"},{"Word":"catch"}]},"block_line":{"name":"block_line","values":[{"Node":"KWIf"},{"Node":"KWLet"},{"Node":"KWFor"},{"Node":"KWLoop"},{"Node":"KWWhile"},{"Node":"KWEnum"},{"Node":"KWReturn"},{"Node":"KWContinue"},{"Node":"KWType"},{"Node":"KWBreak"},{"Node":"KWClass"},{"Node":"KWImport"},{"Node":"KWFunction"},{"Node":"statement"},{"Token":{"Token":";"}}]},"literals":{"name":"literals","values":[{"Token":{"Complex":"string"}},{"Token":{"Complex":"char"}},{"Enumerator":"numbers"},{"Node":"array"},{"Node":"tuple"}]},"list_values":{"name":"list_values","values":[{"Node":"named_expression"},{"Enumerator":"expressions"}]},"entry_nodes":{"name":"entry_nodes","values":[{"Node":"KWFunction"},{"Node":"KWClass"},{"Node":"KWUse"},{"Node":"KWImport"},{"Node":"KWType"},{"Node":"KWEnum"}]},"parameter_idents":{"name":"parameter_idents","values":[{"Token":"Text"},{"Node":"tuple_parameter"}]},"numbers":{"name":"numbers","values":[{"Token":{"Complex":"int"}},{"Token":{"Complex":"float"}},{"Token":{"Complex":"uint"}}]},"class_members":{"name":"class_members","values":[{"Node":"class_field"},{"Node":"KWFunction"}]},"operators":{"name":"operators","values":[{"Token":{"Token":"+="}},{"Token":{"Token":"-="}},{"Token":{"Token":"*="}},{"Token":{"Token":"/="}},{"Token":{"Token":"+"}},{"Token":{"Token":"-"}},{"Token":{"Token":"*"}},{"Token":{"Token":"/"}},{"Token":{"Token":"<="}},{"Token":{"Token":">="}},{"Token":{"Token":"<"}},{"Token":{"Token":">"}},{"Token":{"Token":"=="}},{"Token":{"Token":"="}},{"Token":{"Token":"!="}},{"Token":{"Token":"&&"}},{"Token":{"Token":"||"}}]},"expressions":{"name":"expressions","values":[{"Node":"KWIf"},{"Node":"KWLoop"},{"Node":"closure"},{"Node":"expression"}]},"enum_members":{"name":"enum_members","values":[{"Node":"KWFunction"},{"Node":"enum_variant"}]},"tail_options":{"name":"tail_options","values":[{"Node":"tail_dot"},{"Node":"index"},{"Node":"call"}]},"unary_operators":{"name":"unary_operators","values":[{"Token":{"Token":"!"}},{"Token":{"Token":"-"}}]},"array_types":{"name":"array_types","values":[{"Node":"array_builder"},{"Node":"values_list"}]}},"globals":{"imports":"NodeList"},"eof":true},"parser":{"entry":"entry","eof_error":false}}